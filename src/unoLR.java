//leer_P();
import java.io.*;
import java.util.HashMap;
import java.util.Stack;

public class unoLR {
    static String[][] M;
    static HashMap<String, Integer> columnas = new HashMap<>();
    static int estado = 0;
    static String entrada;
    static String salida;
    static String entradapre;
    static String token;
    static String lexema;
    static String Ren;
    static String Col;
    static int Posicion=0;
    static Stack<String> pila= new Stack<>();
    static String[] pi;
    static int[] lp;

    static String VAL;
    static String DIR;
    static String DIRIDX;
    static String IDX;
    static String FUN;
    static String LONG;
    static String DV_RET;
    static int dirmem=0;
    static String MiFun;
    static String MiTipo;
    static String T1, T2, tmp1;
    static String E0, E1;
    static boolean EnFuncion=false;
    static int contetq=0;
    static int contargs=0;
    static String NoArgs;

    //Tabla de simbolos

    static String[] ID=new String[200];
    static String[] TIPO=new String[200];
    static String[] OBJ=new String[200];
    //static String[] DIRECCION = nes String[200];
    static String[] TAM=new String[200];
    static String[] DIRMEM=new String[200];
    static String[] ETQ=new String[200];
    static String[] RUT=new String[200];
    static String[] TIPO_t=new String[200];
    static int iTIPOt=1;
    static String[] F_t=new String[200];
    static int iFt=1;
    static String[] F_c=new String[200];
    static int iFc=1;
    static String[] T_t=new String[200];
    static int iTt=1;
    static String[] T_c=new String[200];
    static int iTc=1;
    static String[] E_t=new String[200];
    static int iEt=1;
    static String[] E_c=new String[200];
    static int iEc=1;
    static String[] N_t=new String[200];
    static int iNt=1;
    static String[] N_c=new String[200];
    static int iNc=1;
    static String[] L_t=new String[200];
    static int iLt=1;
    static String[] L_c=new String[200];
    static int iLc=1;
    static String[] K_t=new String[200];
    static int iKt=1;
    static String[] K_c=new String[200];
    static int iKc=1;
    static String[] VASIG_t=new String[200];
    static int iVASIGt=1;
    static String[] VASIG_c=new String[200];
    static int iVASIGc=1;
    static String[] ASIG_c=new String[200];
    static int iASIGc=1;
    static String[] IF_c=new String[200];
    static int iIFc=1;
    static String[] BLQ_c=new String[200];
    static int iBLQc=1;
    static String[] INST_c=new String[200];
    static int iINSTc=-1;
    static String[] REP_c=new String[200];
    static int iREPc=-1;
    static String[] ESC_c=new String[200];
    static int iESCc=-1;
    static String[] VARL_c=new String[200];
    static int iVARLc=-1;
    static String[] LEE_c=new String[200];
    static int iLEEc=-1;
    static String[] W_c=new String[200];
    static int iWc=-1;
    static String PPAL_c;
    static String[] NFUN_n=new String[200];
    static int iNFUNn=-1;
    static String[] NFUN_t=new String[200];
    static int iNFUNt=-1;
    static String[] ARGS_c=new String[200];
    static int iARGSc=-1;
    static String[] PRM_c=new String[200];
    static int iPRMc=-1;
    static String[] FUN_c=new String[200];
    static int iFUNc=-1;
    static String[] LFUN_c=new String[200];
    static int iLFUNc=-1;
    static String[] SFUN_c=new String[200];
    static int iSFUNc=-1;
    static String PROG_c;
    static int isym=-1;
    private static long Pos2;

    public static void main(String[] args) {
        //lee_tablaSLR1();
        //leer_P();
        M = new String[200][200];
        for (int i = 0; i < 200; i++) {
            for (int j = 0; j < 200; j++) {
                M[i][j] = "";
            }
        }
        columnas.put("declara", 0);
        columnas.put("fin_declara", 1);
        columnas.put("dato", 2);
        columnas.put("opdec", 3);
        columnas.put("numerico", 4);
        columnas.put("cadena", 5);
        columnas.put(",", 6);
        columnas.put("id", 7);
        columnas.put("[", 8);
        columnas.put("num", 9);
        columnas.put("]", 10);
        columnas.put("comienza", 11);
        columnas.put("termina", 12);
        columnas.put("funciones", 13);
        columnas.put("fin_funciones", 14);
        columnas.put(";", 15);
        columnas.put("funcion", 16);
        columnas.put("(", 17);
        columnas.put(")", 18);
        columnas.put("fin_funcion", 19);
        columnas.put("mientras", 20);
        columnas.put("fin_mientras", 21);
        columnas.put("si", 22);
        columnas.put("entonces", 23);
        columnas.put("otro_caso", 24);
        columnas.put("fin_si", 25);
        columnas.put("repite", 26);
        columnas.put("hasta", 27);
        columnas.put("lee", 28);
        columnas.put("asig", 29);
        columnas.put("escribe", 30);
        columnas.put("escribe_ret", 31);
        columnas.put("o", 32);
        columnas.put("y", 33);
        columnas.put("no", 34);
        columnas.put("=", 35);
        columnas.put("dif", 36);
        columnas.put("mai", 37);
        columnas.put("mei", 38);
        columnas.put(">", 39);
        columnas.put("<", 40);
        columnas.put("+", 41);
        columnas.put("-", 42);
        columnas.put("*", 43);
        columnas.put("/", 44);
        columnas.put("div", 45);
        columnas.put("mod", 46);
        columnas.put("abs", 47);
        columnas.put("cad", 48);
        columnas.put("finarc", 49);
        columnas.put("PROGP", 50);
        columnas.put("PROG", 51);
        columnas.put("SDAT", 52);
        columnas.put("LDATOS", 53);
        columnas.put("DEC", 54);
        columnas.put("TIPO", 55);
        columnas.put("LV", 56);
        columnas.put("VAR", 57);
        columnas.put("PPAL", 58);
        columnas.put("SFUN", 59);
        columnas.put("LFUN", 60);
        columnas.put("BLQ", 61);
        columnas.put("FUN", 62);
        columnas.put("PRM", 63);
        columnas.put("INST", 64);
        columnas.put("W", 65);
        columnas.put("IF", 66);
        columnas.put("REP", 67);
        columnas.put("LEE", 68);
        columnas.put("VARL", 69);
        columnas.put("ASIG", 70);
        columnas.put("VASIG", 71);
        columnas.put("ESC", 72);
        columnas.put("K", 73);
        columnas.put("L", 74);
        columnas.put("N", 75);
        columnas.put("E", 76);
        columnas.put("T", 77);
        columnas.put("F", 78);
        columnas.put("NFUN", 79);
        columnas.put("ARGS", 80);
        M[0][0]="s3";
        M[0][11]="r3";
        M[0][51]="g1";
        M[0][52]="g2";
        M[1][49]="r0";
        M[1][49]="Ac";
        M[2][11]="s5";
        M[2][58]="g4";
        M[3][2]="s8";
        M[3][53]="g6";
        M[3][54]="g7";
        M[4][13]="s10";
        M[4][49]="r15";
        M[4][59]="g9";
        M[5][7]="s26";
        M[5][20]="s21";
        M[5][22]="s20";
        M[5][26]="s22";
        M[5][28]="s23";
        M[5][30]="s24";
        M[5][31]="s25";
        M[5][61]="g11";
        M[5][64]="g12";
        M[5][65]="g15";
        M[5][66]="g14";
        M[5][67]="g16";
        M[5][68]="g17";
        M[5][70]="g13";
        M[5][71]="g19";
        M[5][72]="g18";
        M[6][1]="s27";
        M[7][1]="r4";
        M[7][2]="s8";
        M[7][53]="g28";
        M[7][54]="g7";
        M[8][7]="s31";
        M[8][56]="g29";
        M[8][57]="g30";
        M[9][49]="r1";
        M[10][16]="s34";
        M[10][60]="g32";
        M[10][62]="g33";
        M[11][7]="s26";
        M[11][12]="s35";
        M[11][20]="s21";
        M[11][22]="s20";
        M[11][26]="s22";
        M[11][28]="s23";
        M[11][30]="s24";
        M[11][31]="s25";
        M[11][64]="g36";
        M[11][65]="g15";
        M[11][66]="g14";
        M[11][67]="g16";
        M[11][68]="g17";
        M[11][70]="g13";
        M[11][71]="g19";
        M[11][72]="g18";
        M[12][15]="s37";
        M[13][15]="r24";
        M[14][15]="r25";
        M[15][15]="r26";
        M[16][15]="r27";
        M[17][15]="r28";
        M[18][15]="r29";
        M[19][29]="s38";
        M[20][17]="s39";
        M[21][17]="s40";
        M[22][7]="s26";
        M[22][20]="s21";
        M[22][22]="s20";
        M[22][26]="s22";
        M[22][28]="s23";
        M[22][30]="s24";
        M[22][31]="s25";
        M[22][61]="g41";
        M[22][64]="g12";
        M[22][65]="g15";
        M[22][66]="g14";
        M[22][67]="g16";
        M[22][68]="g17";
        M[22][70]="g13";
        M[22][71]="g19";
        M[22][72]="g18";
        M[23][17]="s42";
        M[24][17]="s43";
        M[25][17]="s44";
        M[26][8]="s45";
        M[26][29]="r39";
        M[27][11]="r2";
        M[28][1]="r5";
        M[29][3]="s46";
        M[30][3]="r9";
        M[30][6]="s47";
        M[31][3]="r11";
        M[31][6]="r11";
        M[31][8]="s48";
        M[32][14]="s49";
        M[33][14]="r16";
        M[33][16]="s34";
        M[33][60]="g50";
        M[33][62]="g33";
        M[34][4]="s52";
        M[34][5]="s53";
        M[34][55]="g51";
        M[35][13]="r13";
        M[35][49]="r13";
        M[36][15]="s54";
        M[37][7]="r19";
        M[37][12]="r19";
        M[37][19]="r19";
        M[37][20]="r19";
        M[37][21]="r19";
        M[37][22]="r19";
        M[37][24]="r19";
        M[37][25]="r19";
        M[37][26]="r19";
        M[37][27]="r19";
        M[37][28]="r19";
        M[37][30]="r19";
        M[37][31]="r19";
        M[38][7]="s64";
        M[38][9]="s65";
        M[38][17]="s62";
        M[38][34]="s56";
        M[38][47]="s63";
        M[38][48]="s66";
        M[38][73]="g55";
        M[38][74]="g57";
        M[38][75]="g58";
        M[38][76]="g59";
        M[38][77]="g60";
        M[38][78]="g61";
        M[38][79]="g67";
        M[39][7]="s64";
        M[39][9]="s65";
        M[39][17]="s62";
        M[39][34]="s56";
        M[39][47]="s63";
        M[39][48]="s66";
        M[39][73]="g68";
        M[39][74]="g57";
        M[39][75]="g58";
        M[39][76]="g59";
        M[39][77]="g60";
        M[39][78]="g61";
        M[39][79]="g67";
        M[40][7]="s64";
        M[40][9]="s65";
        M[40][17]="s62";
        M[40][34]="s56";
        M[40][47]="s63";
        M[40][48]="s66";
        M[40][73]="g69";
        M[40][74]="g57";
        M[40][75]="g58";
        M[40][76]="g59";
        M[40][77]="g60";
        M[40][78]="g61";
        M[40][79]="g67";
        M[41][7]="s26";
        M[41][20]="s21";
        M[41][22]="s20";
        M[41][26]="s22";
        M[41][27]="s70";
        M[41][28]="s23";
        M[41][30]="s24";
        M[41][31]="s25";
        M[41][64]="g36";
        M[41][65]="g15";
        M[41][66]="g14";
        M[41][67]="g16";
        M[41][68]="g17";
        M[41][70]="g13";
        M[41][71]="g19";
        M[41][72]="g18";
        M[42][7]="s72";
        M[42][69]="g71";
        M[43][7]="s64";
        M[43][9]="s65";
        M[43][17]="s62";
        M[43][34]="s56";
        M[43][47]="s63";
        M[43][48]="s66";
        M[43][73]="g73";
        M[43][74]="g57";
        M[43][75]="g58";
        M[43][76]="g59";
        M[43][77]="g60";
        M[43][78]="g61";
        M[43][79]="g67";
        M[44][7]="s64";
        M[44][9]="s65";
        M[44][17]="s62";
        M[44][34]="s56";
        M[44][47]="s63";
        M[44][48]="s66";
        M[44][73]="g74";
        M[44][74]="g57";
        M[44][75]="g58";
        M[44][76]="g59";
        M[44][77]="g60";
        M[44][78]="g61";
        M[44][79]="g67";
        M[45][7]="s76";
        M[45][9]="s75";
        M[46][4]="s52";
        M[46][5]="s53";
        M[46][55]="g77";
        M[47][7]="s31";
        M[47][56]="g78";
        M[47][57]="g30";
        M[48][9]="s79";
        M[49][49]="r14";
        M[50][14]="r17";
        M[51][7]="s80";
        M[52][1]="r7";
        M[52][2]="r7";
        M[52][7]="r7";
        M[53][1]="r8";
        M[53][2]="r8";
        M[53][7]="r8";
        M[54][7]="r18";
        M[54][12]="r18";
        M[54][19]="r18";
        M[54][20]="r18";
        M[54][21]="r18";
        M[54][22]="r18";
        M[54][24]="r18";
        M[54][25]="r18";
        M[54][26]="r18";
        M[54][27]="r18";
        M[54][28]="r18";
        M[54][30]="r18";
        M[54][31]="r18";
        M[55][15]="r38";
        M[55][32]="s81";
        M[55][33]="s82";
        M[56][17]="s83";
        M[57][6]="r47";
        M[57][15]="r47";
        M[57][18]="r47";
        M[57][32]="r47";
        M[57][33]="r47";
        M[57][35]="s84";
        M[57][36]="s85";
        M[57][37]="s86";
        M[57][38]="s87";
        M[57][39]="s88";
        M[57][40]="s89";
        M[58][6]="r54";
        M[58][15]="r54";
        M[58][18]="r54";
        M[58][32]="r54";
        M[58][33]="r54";
        M[58][35]="r54";
        M[58][36]="r54";
        M[58][37]="r54";
        M[58][38]="r54";
        M[58][39]="r54";
        M[58][40]="r54";
        M[59][6]="r55";
        M[59][15]="r55";
        M[59][18]="r55";
        M[59][32]="r55";
        M[59][33]="r55";
        M[59][35]="r55";
        M[59][36]="r55";
        M[59][37]="r55";
        M[59][38]="r55";
        M[59][39]="r55";
        M[59][40]="r55";
        M[59][41]="s90";
        M[59][42]="s91";
        M[60][6]="r58";
        M[60][15]="r58";
        M[60][18]="r58";
        M[60][32]="r58";
        M[60][33]="r58";
        M[60][35]="r58";
        M[60][36]="r58";
        M[60][37]="r58";
        M[60][38]="r58";
        M[60][39]="r58";
        M[60][40]="r58";
        M[60][41]="r58";
        M[60][42]="r58";
        M[60][43]="s92";
        M[60][44]="s93";
        M[60][45]="s94";
        M[60][46]="s95";
        M[61][6]="r63";
        M[61][15]="r63";
        M[61][18]="r63";
        M[61][32]="r63";
        M[61][33]="r63";
        M[61][35]="r63";
        M[61][36]="r63";
        M[61][37]="r63";
        M[61][38]="r63";
        M[61][39]="r63";
        M[61][40]="r63";
        M[61][41]="r63";
        M[61][42]="r63";
        M[61][43]="r63";
        M[61][44]="r63";
        M[61][45]="r63";
        M[61][46]="r63";
        M[62][7]="s64";
        M[62][9]="s65";
        M[62][17]="s62";
        M[62][34]="s56";
        M[62][47]="s63";
        M[62][48]="s66";
        M[62][73]="g96";
        M[62][74]="g57";
        M[62][75]="g58";
        M[62][76]="g59";
        M[62][77]="g60";
        M[62][78]="g61";
        M[62][79]="g67";
        M[63][17]="s97";
        M[64][6]="r66";
        M[64][8]="s98";
        M[64][15]="r66";
        M[64][17]="r72";
        M[64][18]="r66";
        M[64][32]="r66";
        M[64][33]="r66";
        M[64][35]="r66";
        M[64][36]="r66";
        M[64][37]="r66";
        M[64][38]="r66";
        M[64][39]="r66";
        M[64][40]="r66";
        M[64][41]="r66";
        M[64][42]="r66";
        M[64][43]="r66";
        M[64][44]="r66";
        M[64][45]="r66";
        M[64][46]="r66";
        M[65][6]="r69";
        M[65][15]="r69";
        M[65][18]="r69";
        M[65][32]="r69";
        M[65][33]="r69";
        M[65][35]="r69";
        M[65][36]="r69";
        M[65][37]="r69";
        M[65][38]="r69";
        M[65][39]="r69";
        M[65][40]="r69";
        M[65][41]="r69";
        M[65][42]="r69";
        M[65][43]="r69";
        M[65][44]="r69";
        M[65][45]="r69";
        M[65][46]="r69";
        M[66][6]="r70";
        M[66][15]="r70";
        M[66][18]="r70";
        M[66][32]="r70";
        M[66][33]="r70";
        M[66][35]="r70";
        M[66][36]="r70";
        M[66][37]="r70";
        M[66][38]="r70";
        M[66][39]="r70";
        M[66][40]="r70";
        M[66][41]="r70";
        M[66][42]="r70";
        M[66][43]="r70";
        M[66][44]="r70";
        M[66][45]="r70";
        M[66][46]="r70";
        M[67][17]="s99";
        M[68][18]="s100";
        M[68][32]="s81";
        M[68][33]="s82";
        M[69][18]="s101";
        M[69][32]="s81";
        M[69][33]="s82";
        M[70][17]="s102";
        M[71][18]="s103";
        M[72][8]="s104";
        M[72][18]="r35";
        M[73][18]="s105";
        M[73][32]="s81";
        M[73][33]="s82";
        M[74][18]="s106";
        M[74][32]="s81";
        M[74][33]="s82";
        M[75][10]="s107";
        M[76][10]="s108";
        M[77][1]="r6";
        M[77][2]="r6";
        M[78][3]="r10";
        M[79][10]="s109";
        M[80][17]="s110";
        M[81][7]="s64";
        M[81][9]="s65";
        M[81][17]="s62";
        M[81][47]="s63";
        M[81][48]="s66";
        M[81][74]="g111";
        M[81][75]="g58";
        M[81][76]="g59";
        M[81][77]="g60";
        M[81][78]="g61";
        M[81][79]="g67";
        M[82][7]="s64";
        M[82][9]="s65";
        M[82][17]="s62";
        M[82][47]="s63";
        M[82][48]="s66";
        M[82][74]="g112";
        M[82][75]="g58";
        M[82][76]="g59";
        M[82][77]="g60";
        M[82][78]="g61";
        M[82][79]="g67";
        M[83][7]="s64";
        M[83][9]="s65";
        M[83][17]="s62";
        M[83][34]="s56";
        M[83][47]="s63";
        M[83][48]="s66";
        M[83][73]="g113";
        M[83][74]="g57";
        M[83][75]="g58";
        M[83][76]="g59";
        M[83][77]="g60";
        M[83][78]="g61";
        M[83][79]="g67";
        M[84][7]="s64";
        M[84][9]="s65";
        M[84][17]="s62";
        M[84][47]="s63";
        M[84][48]="s66";
        M[84][76]="g114";
        M[84][77]="g60";
        M[84][78]="g61";
        M[84][79]="g67";
        M[85][7]="s64";
        M[85][9]="s65";
        M[85][17]="s62";
        M[85][47]="s63";
        M[85][48]="s66";
        M[85][76]="g115";
        M[85][77]="g60";
        M[85][78]="g61";
        M[85][79]="g67";
        M[86][7]="s64";
        M[86][9]="s65";
        M[86][17]="s62";
        M[86][47]="s63";
        M[86][48]="s66";
        M[86][76]="g116";
        M[86][77]="g60";
        M[86][78]="g61";
        M[86][79]="g67";
        M[87][7]="s64";
        M[87][9]="s65";
        M[87][17]="s62";
        M[87][47]="s63";
        M[87][48]="s66";
        M[87][76]="g117";
        M[87][77]="g60";
        M[87][78]="g61";
        M[87][79]="g67";
        M[88][7]="s64";
        M[88][9]="s65";
        M[88][17]="s62";
        M[88][47]="s63";
        M[88][48]="s66";
        M[88][76]="g118";
        M[88][77]="g60";
        M[88][78]="g61";
        M[88][79]="g67";
        M[89][7]="s64";
        M[89][9]="s65";
        M[89][17]="s62";
        M[89][47]="s63";
        M[89][48]="s66";
        M[89][76]="g119";
        M[89][77]="g60";
        M[89][78]="g61";
        M[89][79]="g67";
        M[90][7]="s64";
        M[90][9]="s65";
        M[90][17]="s62";
        M[90][47]="s63";
        M[90][48]="s66";
        M[90][77]="g120";
        M[90][78]="g61";
        M[90][79]="g67";
        M[91][7]="s64";
        M[91][9]="s65";
        M[91][17]="s62";
        M[91][47]="s63";
        M[91][48]="s66";
        M[91][77]="g121";
        M[91][78]="g61";
        M[91][79]="g67";
        M[92][7]="s64";
        M[92][9]="s65";
        M[92][17]="s62";
        M[92][47]="s63";
        M[92][48]="s66";
        M[92][78]="g122";
        M[92][79]="g67";
        M[93][7]="s64";
        M[93][9]="s65";
        M[93][17]="s62";
        M[93][47]="s63";
        M[93][48]="s66";
        M[93][78]="g123";
        M[93][79]="g67";
        M[94][7]="s64";
        M[94][9]="s65";
        M[94][17]="s62";
        M[94][47]="s63";
        M[94][48]="s66";
        M[94][78]="g124";
        M[94][79]="g67";
        M[95][7]="s64";
        M[95][9]="s65";
        M[95][17]="s62";
        M[95][47]="s63";
        M[95][48]="s66";
        M[95][78]="g125";
        M[95][79]="g67";
        M[96][18]="s126";
        M[96][32]="s81";
        M[96][33]="s82";
        M[97][7]="s64";
        M[97][9]="s65";
        M[97][17]="s62";
        M[97][34]="s56";
        M[97][47]="s63";
        M[97][48]="s66";
        M[97][73]="g127";
        M[97][74]="g57";
        M[97][75]="g58";
        M[97][76]="g59";
        M[97][77]="g60";
        M[97][78]="g61";
        M[97][79]="g67";
        M[98][7]="s129";
        M[98][9]="s128";
        M[99][6]="r75";
        M[99][7]="s64";
        M[99][9]="s65";
        M[99][17]="s62";
        M[99][18]="r75";
        M[99][34]="s56";
        M[99][47]="s63";
        M[99][48]="s66";
        M[99][73]="g131";
        M[99][74]="g57";
        M[99][75]="g58";
        M[99][76]="g59";
        M[99][77]="g60";
        M[99][78]="g61";
        M[99][79]="g67";
        M[99][80]="g130";
        M[100][23]="s132";
        M[101][7]="s26";
        M[101][20]="s21";
        M[101][22]="s20";
        M[101][26]="s22";
        M[101][28]="s23";
        M[101][30]="s24";
        M[101][31]="s25";
        M[101][61]="g133";
        M[101][64]="g12";
        M[101][65]="g15";
        M[101][66]="g14";
        M[101][67]="g16";
        M[101][68]="g17";
        M[101][70]="g13";
        M[101][71]="g19";
        M[101][72]="g18";
        M[102][7]="s64";
        M[102][9]="s65";
        M[102][17]="s62";
        M[102][34]="s56";
        M[102][47]="s63";
        M[102][48]="s66";
        M[102][73]="g134";
        M[102][74]="g57";
        M[102][75]="g58";
        M[102][76]="g59";
        M[102][77]="g60";
        M[102][78]="g61";
        M[102][79]="g67";
        M[103][15]="r34";
        M[104][7]="s136";
        M[104][9]="s135";
        M[105][15]="r42";
        M[106][15]="r43";
        M[107][29]="r40";
        M[108][29]="r41";
        M[109][3]="r12";
        M[109][6]="r12";
        M[110][4]="s52";
        M[110][5]="s53";
        M[110][6]="r23";
        M[110][18]="r23";
        M[110][55]="g138";
        M[110][63]="g137";
        M[111][6]="r44";
        M[111][15]="r44";
        M[111][18]="r44";
        M[111][32]="r44";
        M[111][33]="r44";
        M[111][35]="s84";
        M[111][36]="s85";
        M[111][37]="s86";
        M[111][38]="s87";
        M[111][39]="s88";
        M[111][40]="s89";
        M[112][6]="r45";
        M[112][15]="r45";
        M[112][18]="r45";
        M[112][32]="r45";
        M[112][33]="r45";
        M[112][35]="s84";
        M[112][36]="s85";
        M[112][37]="s86";
        M[112][38]="s87";
        M[112][39]="s88";
        M[112][40]="s89";
        M[113][18]="s139";
        M[113][32]="s81";
        M[113][33]="s82";
        M[114][6]="r48";
        M[114][15]="r48";
        M[114][18]="r48";
        M[114][32]="r48";
        M[114][33]="r48";
        M[114][35]="r48";
        M[114][36]="r48";
        M[114][37]="r48";
        M[114][38]="r48";
        M[114][39]="r48";
        M[114][40]="r48";
        M[114][41]="s90";
        M[114][42]="s91";
        M[115][6]="r49";
        M[115][15]="r49";
        M[115][18]="r49";
        M[115][32]="r49";
        M[115][33]="r49";
        M[115][35]="r49";
        M[115][36]="r49";
        M[115][37]="r49";
        M[115][38]="r49";
        M[115][39]="r49";
        M[115][40]="r49";
        M[115][41]="s90";
        M[115][42]="s91";
        M[116][6]="r50";
        M[116][15]="r50";
        M[116][18]="r50";
        M[116][32]="r50";
        M[116][33]="r50";
        M[116][35]="r50";
        M[116][36]="r50";
        M[116][37]="r50";
        M[116][38]="r50";
        M[116][39]="r50";
        M[116][40]="r50";
        M[116][41]="s90";
        M[116][42]="s91";
        M[117][6]="r51";
        M[117][15]="r51";
        M[117][18]="r51";
        M[117][32]="r51";
        M[117][33]="r51";
        M[117][35]="r51";
        M[117][36]="r51";
        M[117][37]="r51";
        M[117][38]="r51";
        M[117][39]="r51";
        M[117][40]="r51";
        M[117][41]="s90";
        M[117][42]="s91";
        M[118][6]="r52";
        M[118][15]="r52";
        M[118][18]="r52";
        M[118][32]="r52";
        M[118][33]="r52";
        M[118][35]="r52";
        M[118][36]="r52";
        M[118][37]="r52";
        M[118][38]="r52";
        M[118][39]="r52";
        M[118][40]="r52";
        M[118][41]="s90";
        M[118][42]="s91";
        M[119][6]="r53";
        M[119][15]="r53";
        M[119][18]="r53";
        M[119][32]="r53";
        M[119][33]="r53";
        M[119][35]="r53";
        M[119][36]="r53";
        M[119][37]="r53";
        M[119][38]="r53";
        M[119][39]="r53";
        M[119][40]="r53";
        M[119][41]="s90";
        M[119][42]="s91";
        M[120][6]="r56";
        M[120][15]="r56";
        M[120][18]="r56";
        M[120][32]="r56";
        M[120][33]="r56";
        M[120][35]="r56";
        M[120][36]="r56";
        M[120][37]="r56";
        M[120][38]="r56";
        M[120][39]="r56";
        M[120][40]="r56";
        M[120][41]="r56";
        M[120][42]="r56";
        M[120][43]="s92";
        M[120][44]="s93";
        M[120][45]="s94";
        M[120][46]="s95";
        M[121][6]="r57";
        M[121][15]="r57";
        M[121][18]="r57";
        M[121][32]="r57";
        M[121][33]="r57";
        M[121][35]="r57";
        M[121][36]="r57";
        M[121][37]="r57";
        M[121][38]="r57";
        M[121][39]="r57";
        M[121][40]="r57";
        M[121][41]="r57";
        M[121][42]="r57";
        M[121][43]="s92";
        M[121][44]="s93";
        M[121][45]="s94";
        M[121][46]="s95";
        M[122][6]="r59";
        M[122][15]="r59";
        M[122][18]="r59";
        M[122][32]="r59";
        M[122][33]="r59";
        M[122][35]="r59";
        M[122][36]="r59";
        M[122][37]="r59";
        M[122][38]="r59";
        M[122][39]="r59";
        M[122][40]="r59";
        M[122][41]="r59";
        M[122][42]="r59";
        M[122][43]="r59";
        M[122][44]="r59";
        M[122][45]="r59";
        M[122][46]="r59";
        M[123][6]="r60";
        M[123][15]="r60";
        M[123][18]="r60";
        M[123][32]="r60";
        M[123][33]="r60";
        M[123][35]="r60";
        M[123][36]="r60";
        M[123][37]="r60";
        M[123][38]="r60";
        M[123][39]="r60";
        M[123][40]="r60";
        M[123][41]="r60";
        M[123][42]="r60";
        M[123][43]="r60";
        M[123][44]="r60";
        M[123][45]="r60";
        M[123][46]="r60";
        M[124][6]="r61";
        M[124][15]="r61";
        M[124][18]="r61";
        M[124][32]="r61";
        M[124][33]="r61";
        M[124][35]="r61";
        M[124][36]="r61";
        M[124][37]="r61";
        M[124][38]="r61";
        M[124][39]="r61";
        M[124][40]="r61";
        M[124][41]="r61";
        M[124][42]="r61";
        M[124][43]="r61";
        M[124][44]="r61";
        M[124][45]="r61";
        M[124][46]="r61";
        M[125][6]="r62";
        M[125][15]="r62";
        M[125][18]="r62";
        M[125][32]="r62";
        M[125][33]="r62";
        M[125][35]="r62";
        M[125][36]="r62";
        M[125][37]="r62";
        M[125][38]="r62";
        M[125][39]="r62";
        M[125][40]="r62";
        M[125][41]="r62";
        M[125][42]="r62";
        M[125][43]="r62";
        M[125][44]="r62";
        M[125][45]="r62";
        M[125][46]="r62";
        M[126][6]="r64";
        M[126][15]="r64";
        M[126][18]="r64";
        M[126][32]="r64";
        M[126][33]="r64";
        M[126][35]="r64";
        M[126][36]="r64";
        M[126][37]="r64";
        M[126][38]="r64";
        M[126][39]="r64";
        M[126][40]="r64";
        M[126][41]="r64";
        M[126][42]="r64";
        M[126][43]="r64";
        M[126][44]="r64";
        M[126][45]="r64";
        M[126][46]="r64";
        M[127][18]="s140";
        M[127][32]="s81";
        M[127][33]="s82";
        M[128][10]="s141";
        M[129][10]="s142";
        M[130][6]="s144";
        M[130][18]="s143";
        M[131][6]="r73";
        M[131][18]="r73";
        M[131][32]="s81";
        M[131][33]="s82";
        M[132][7]="s26";
        M[132][20]="s21";
        M[132][22]="s20";
        M[132][26]="s22";
        M[132][28]="s23";
        M[132][30]="s24";
        M[132][31]="s25";
        M[132][61]="g145";
        M[132][64]="g12";
        M[132][65]="g15";
        M[132][66]="g14";
        M[132][67]="g16";
        M[132][68]="g17";
        M[132][70]="g13";
        M[132][71]="g19";
        M[132][72]="g18";
        M[133][7]="s26";
        M[133][20]="s21";
        M[133][21]="s146";
        M[133][22]="s20";
        M[133][26]="s22";
        M[133][28]="s23";
        M[133][30]="s24";
        M[133][31]="s25";
        M[133][64]="g36";
        M[133][65]="g15";
        M[133][66]="g14";
        M[133][67]="g16";
        M[133][68]="g17";
        M[133][70]="g13";
        M[133][71]="g19";
        M[133][72]="g18";
        M[134][18]="s147";
        M[134][32]="s81";
        M[134][33]="s82";
        M[135][10]="s148";
        M[136][10]="s149";
        M[137][6]="s151";
        M[137][18]="s150";
        M[138][7]="s152";
        M[139][6]="r46";
        M[139][15]="r46";
        M[139][18]="r46";
        M[139][32]="r46";
        M[139][33]="r46";
        M[140][6]="r65";
        M[140][15]="r65";
        M[140][18]="r65";
        M[140][32]="r65";
        M[140][33]="r65";
        M[140][35]="r65";
        M[140][36]="r65";
        M[140][37]="r65";
        M[140][38]="r65";
        M[140][39]="r65";
        M[140][40]="r65";
        M[140][41]="r65";
        M[140][42]="r65";
        M[140][43]="r65";
        M[140][44]="r65";
        M[140][45]="r65";
        M[140][46]="r65";
        M[141][6]="r67";
        M[141][15]="r67";
        M[141][18]="r67";
        M[141][32]="r67";
        M[141][33]="r67";
        M[141][35]="r67";
        M[141][36]="r67";
        M[141][37]="r67";
        M[141][38]="r67";
        M[141][39]="r67";
        M[141][40]="r67";
        M[141][41]="r67";
        M[141][42]="r67";
        M[141][43]="r67";
        M[141][44]="r67";
        M[141][45]="r67";
        M[141][46]="r67";
        M[142][6]="r68";
        M[142][15]="r68";
        M[142][18]="r68";
        M[142][32]="r68";
        M[142][33]="r68";
        M[142][35]="r68";
        M[142][36]="r68";
        M[142][37]="r68";
        M[142][38]="r68";
        M[142][39]="r68";
        M[142][40]="r68";
        M[142][41]="r68";
        M[142][42]="r68";
        M[142][43]="r68";
        M[142][44]="r68";
        M[142][45]="r68";
        M[142][46]="r68";
        M[143][6]="r71";
        M[143][15]="r71";
        M[143][18]="r71";
        M[143][32]="r71";
        M[143][33]="r71";
        M[143][35]="r71";
        M[143][36]="r71";
        M[143][37]="r71";
        M[143][38]="r71";
        M[143][39]="r71";
        M[143][40]="r71";
        M[143][41]="r71";
        M[143][42]="r71";
        M[143][43]="r71";
        M[143][44]="r71";
        M[143][45]="r71";
        M[143][46]="r71";
        M[144][7]="s64";
        M[144][9]="s65";
        M[144][17]="s62";
        M[144][34]="s56";
        M[144][47]="s63";
        M[144][48]="s66";
        M[144][73]="g153";
        M[144][74]="g57";
        M[144][75]="g58";
        M[144][76]="g59";
        M[144][77]="g60";
        M[144][78]="g61";
        M[144][79]="g67";
        M[145][7]="s26";
        M[145][20]="s21";
        M[145][22]="s20";
        M[145][24]="s154";
        M[145][25]="s155";
        M[145][26]="s22";
        M[145][28]="s23";
        M[145][30]="s24";
        M[145][31]="s25";
        M[145][64]="g36";
        M[145][65]="g15";
        M[145][66]="g14";
        M[145][67]="g16";
        M[145][68]="g17";
        M[145][70]="g13";
        M[145][71]="g19";
        M[145][72]="g18";
        M[146][15]="r30";
        M[147][15]="r33";
        M[148][18]="r36";
        M[149][18]="r37";
        M[150][7]="s26";
        M[150][20]="s21";
        M[150][22]="s20";
        M[150][26]="s22";
        M[150][28]="s23";
        M[150][30]="s24";
        M[150][31]="s25";
        M[150][61]="g156";
        M[150][64]="g12";
        M[150][65]="g15";
        M[150][66]="g14";
        M[150][67]="g16";
        M[150][68]="g17";
        M[150][70]="g13";
        M[150][71]="g19";
        M[150][72]="g18";
        M[151][4]="s52";
        M[151][5]="s53";
        M[151][55]="g157";
        M[152][6]="r22";
        M[152][18]="r22";
        M[153][6]="r74";
        M[153][18]="r74";
        M[153][32]="s81";
        M[153][33]="s82";
        M[154][7]="s26";
        M[154][20]="s21";
        M[154][22]="s20";
        M[154][26]="s22";
        M[154][28]="s23";
        M[154][30]="s24";
        M[154][31]="s25";
        M[154][61]="g158";
        M[154][64]="g12";
        M[154][65]="g15";
        M[154][66]="g14";
        M[154][67]="g16";
        M[154][68]="g17";
        M[154][70]="g13";
        M[154][71]="g19";
        M[154][72]="g18";
        M[155][15]="r32";
        M[156][7]="s26";
        M[156][19]="s159";
        M[156][20]="s21";
        M[156][22]="s20";
        M[156][26]="s22";
        M[156][28]="s23";
        M[156][30]="s24";
        M[156][31]="s25";
        M[156][64]="g36";
        M[156][65]="g15";
        M[156][66]="g14";
        M[156][67]="g16";
        M[156][68]="g17";
        M[156][70]="g13";
        M[156][71]="g19";
        M[156][72]="g18";
        M[157][7]="s160";
        M[158][7]="s26";
        M[158][20]="s21";
        M[158][22]="s20";
        M[158][25]="s161";
        M[158][26]="s22";
        M[158][28]="s23";
        M[158][30]="s24";
        M[158][31]="s25";
        M[158][64]="g36";
        M[158][65]="g15";
        M[158][66]="g14";
        M[158][67]="g16";
        M[158][68]="g17";
        M[158][70]="g13";
        M[158][71]="g19";
        M[158][72]="g18";
        M[159][14]="r20";
        M[159][16]="r20";
        M[160][6]="r21";
        M[160][18]="r21";
        M[161][15]="r31";

        pi = new String[76];
        lp = new int[76];
        pi[0]="PROGP";
        lp[0]=1;
        pi[1]="PROG";
        lp[1]=3;
        pi[2]="SDAT";
        lp[2]=3;
        pi[3]="SDAT";
        lp[3]=0;
        pi[4]="LDATOS";
        lp[4]=1;
        pi[5]="LDATOS";
        lp[5]=2;
        pi[6]="DEC";
        lp[6]=4;
        pi[7]="TIPO";
        lp[7]=1;
        pi[8]="TIPO";
        lp[8]=1;
        pi[9]="LV";
        lp[9]=1;
        pi[10]="LV";
        lp[10]=3;
        pi[11]="VAR";
        lp[11]=1;
        pi[12]="VAR";
        lp[12]=4;
        pi[13]="PPAL";
        lp[13]=3;
        pi[14]="SFUN";
        lp[14]=3;
        pi[15]="SFUN";
        lp[15]=0;
        pi[16]="LFUN";
        lp[16]=1;
        pi[17]="LFUN";
        lp[17]=2;
        pi[18]="BLQ";
        lp[18]=3;
        pi[19]="BLQ";
        lp[19]=2;
        pi[20]="FUN";
        lp[20]=8;
        pi[21]="PRM";
        lp[21]=4;
        pi[22]="PRM";
        lp[22]=2;
        pi[23]="PRM";
        lp[23]=0;
        pi[24]="INST";
        lp[24]=1;
        pi[25]="INST";
        lp[25]=1;
        pi[26]="INST";
        lp[26]=1;
        pi[27]="INST";
        lp[27]=1;
        pi[28]="INST";
        lp[28]=1;
        pi[29]="INST";
        lp[29]=1;
        pi[30]="W";
        lp[30]=6;
        pi[31]="IF";
        lp[31]=9;
        pi[32]="IF";
        lp[32]=7;
        pi[33]="REP";
        lp[33]=6;
        pi[34]="LEE";
        lp[34]=4;
        pi[35]="VARL";
        lp[35]=1;
        pi[36]="VARL";
        lp[36]=4;
        pi[37]="VARL";
        lp[37]=4;
        pi[38]="ASIG";
        lp[38]=3;
        pi[39]="VASIG";
        lp[39]=1;
        pi[40]="VASIG";
        lp[40]=4;
        pi[41]="VASIG";
        lp[41]=4;
        pi[42]="ESC";
        lp[42]=4;
        pi[43]="ESC";
        lp[43]=4;
        pi[44]="K";
        lp[44]=3;
        pi[45]="K";
        lp[45]=3;
        pi[46]="K";
        lp[46]=4;
        pi[47]="K";
        lp[47]=1;
        pi[48]="L";
        lp[48]=3;
        pi[49]="L";
        lp[49]=3;
        pi[50]="L";
        lp[50]=3;
        pi[51]="L";
        lp[51]=3;
        pi[52]="L";
        lp[52]=3;
        pi[53]="L";
        lp[53]=3;
        pi[54]="L";
        lp[54]=1;
        pi[55]="N";
        lp[55]=1;
        pi[56]="E";
        lp[56]=3;
        pi[57]="E";
        lp[57]=3;
        pi[58]="E";
        lp[58]=1;
        pi[59]="T";
        lp[59]=3;
        pi[60]="T";
        lp[60]=3;
        pi[61]="T";
        lp[61]=3;
        pi[62]="T";
        lp[62]=3;
        pi[63]="T";
        lp[63]=1;
        pi[64]="F";
        lp[64]=3;
        pi[65]="F";
        lp[65]=4;
        pi[66]="F";
        lp[66]=1;
        pi[67]="F";
        lp[67]=4;
        pi[68]="F";
        lp[68]=4;
        pi[69]="F";
        lp[69]=1;
        pi[70]="F";
        lp[70]=1;
        pi[71]="F";
        lp[71]=4;
        pi[72]="NFUN";
        lp[72]=1;
        pi[73]="ARGS";
        lp[73]=1;
        pi[74]="ARGS";
        lp[74]=3;
        pi[75]="ARGS";
        lp[75]=0;
        if (args[0].isEmpty()){
            System.out.println("No se ha ingresado el nombre del archivo");
            System.exit(0);
        }
        entrada = args[0]+".lex";
        entradapre = args[0]+".cm2";
        salida = args[0]+".cm3";
        precarga_TS(entradapre);
        System.out.println("Tabla de simbolos precargada");
        pila.push("0");
        lee_token(xArchivo(entrada));
        while(true){
            estado = Integer.parseInt(pila.peek());
            String accion = M[estado][columnas.get(token)];
            // Si m == "Ac" se acepta
            //System.out.print(accion+"\n");
            if (accion.equals("Ac")) {
                print_tabla();
                System.out.println("Sintaxis correcta");
                creaEscribeArchivo(xArchivo(salida),PROG_c);
                break;
            }
            if (Shift(accion)){
                //System.out.println(token);
                //System.out.println(lexema);
                pila.push(token);
                pila.push(getNumero(accion));
                codigoShift(Integer.parseInt(getNumero(accion)));
                lee_token(xArchivo(entrada));
            } else{
                if (Reduce(accion)){
                    //System.out.println(accion);
                    //System.out.println(token);
                    //System.out.println(lexema);
                    //System.out.println(accion);
                    int num = Integer.parseInt(getNumero(accion));

                    int t = lp[num];
                    for (int i = 0; i < t*2; i++) {
                        pila.pop();
                    }
                    String prod = pi[num];
                    int e = Integer.parseInt(pila.peek());
                    if(e == 0 && prod.equals("PROGP")){
                        break;
                    }
                    pila.push(prod);
                    codigoReduce(num);
                    if(!M[e][columnas.get(prod)].isEmpty()){
                        String gt = getNumero(M[e][columnas.get(prod)]);
                        pila.push(gt);
                    } else{
                        error();
                        break;
                    }
                } else {
                    error();
                    break;
                }
            }
        }
    }
    public static File xArchivo(String xName){
        return new File(xName);
    }
    public static boolean Shift(String accion) {
        return accion.contains("s");
    }
    public static boolean Reduce(String accion) {
        return accion.contains("r");
    }
    public static void codigoShift(int shift){
        switch (shift){
            case 26:
                VAL = nombre_var(lexema);
                estaDeclarada(VAL);
                DIR = DIRMEM[RenSYM(VAL)];
                break;
            case 31:
                VAL = lexema;
                break;
            case 34:
                EnFuncion = true;
                break;
            case 52:
                VAL = lexema;

                break;
            case 53:
                VAL = lexema;
                break;
            case 64:
                VAL = lexema;
                break;
            case 65:
                VAL = lexema;
                break;
            case 66:
                VAL = lexema;
                break;
            case 72:
                VAL = lexema;
                estaDeclarada(VAL);
                DIR = DIRMEM[RenSYM(VAL)];
                break;
            case 75:
                IDX = lexema;
                estaDeclarada(VAL);
                arreglo(VAL);
                idxEnArreglo(IDX,TAM[RenSYM(VAL)]);
                DIR = (Integer.parseInt(DIR)+Integer.parseInt(IDX))+"";
                break;
            case 76:
                IDX = nombre_var(lexema);
                estaDeclarada(IDX);
                tipoEquivalente(TIPO[RenSYM(IDX)],"numerico");
                noArreglo(IDX);
                arreglo(VAL);

                DIRIDX = DIRMEM[RenSYM(IDX)];
                break;

            case 79:
                LONG = lexema;
                entero(LONG);
                entero1a5000(LONG);
                break;
            case 80:
                FUN = lexema;
                NoArgs = TAM[RenSYM("$"+FUN)];
                break;
            case 128:
                IDX = lexema;
                break;
            case 129:
                IDX = lexema;
                break;
            case 135:
                IDX = lexema;
                estaDeclarada(VAL);
                arreglo(VAL);
                idxEnArreglo(IDX,TAM[RenSYM(VAL)]);
                DIR = (Integer.parseInt(DIR)+Integer.parseInt(IDX))+"";
                break;
            case 136:
                IDX = nombre_var(lexema);
                estaDeclarada(IDX);
                tipoEquivalente(TIPO[RenSYM(IDX)],"numerico");
                noArreglo(IDX);
                arreglo(VAL);
                DIRIDX = DIRMEM[RenSYM(IDX)];
                break;
            case 150:
                cardinalidad("$"+FUN,contargs);
                contargs = 0;
                break;
            case 152:
                VAL = lexema;
                break;
            case 159:
                EnFuncion = false;
                break;
            case 160:
                VAL = lexema;
                break;
        }
    }
    public static void codigoReduce(int prod){
        switch (prod){
            case 1:
                PROG_c = PPAL_c +"fin\r\n"+SFUN_c[iSFUNc--]+"fin\r\n";

                break;
            case 6:
                T1 = TIPO_t[iTIPOt--];
                for (int i = 0; i <= isym; i++) {
                    if(TIPO[i].equals("pend")){
                        TIPO[i] = VAL;
                    }
                }
                break;
            case 7:
                TIPO_t[++iTIPOt] = VAL;
                break;
            case 8:
                TIPO_t[++iTIPOt] = VAL;
                break;
            case 11:
                noExisteVariable(VAL);
                inserta(VAL,"pend", "var","","","");
                //print_tabla();
                //pausa();
                break;
            case 12:
                noExisteVariable(VAL);
                inserta(VAL,"pend", "arr","","","");
                dirmem = Integer.parseInt(DIRMEM[RenSYM(VAL)])+Integer.parseInt(LONG);
                //print_tabla();
                //pausa();
                break;
            case 13:
                PPAL_c = BLQ_c[iBLQc--];
                break;
            case 14:
                SFUN_c[++iSFUNc] = LFUN_c[iLFUNc--];
                break;
            case 15:
                SFUN_c[++iSFUNc] = "";
                break;
            case 16:
                LFUN_c[++iLFUNc] = FUN_c[iFUNc--];
                break;
            case 17:
                T1 = FUN_c[iFUNc--]+LFUN_c[iLFUNc--];
                LFUN_c[++iLFUNc] = T1;
                break;
            case 18:
                T1 = BLQ_c[iBLQc--]+INST_c[iINSTc--];
                BLQ_c[++iBLQc] = T1;
                break;
            case 19:
                BLQ_c[++iBLQc] = INST_c[iINSTc--];
                break;
            case 20:
                E0=etq_fun("$"+FUN);
                FUN_c[++iFUNc] = E0+" "+PRM_c[iPRMc--]+BLQ_c[iBLQc--]+"ira\r\n";
                break;
            case 21:
                T1 = "$"+FUN+VAL;
                T2 = "$"+FUN+contargs;
                noExisteVariable(T1);
                inserta(T1,TIPO_t[iTIPOt],"par","","","$"+FUN);
                inserta(T2, TIPO_t[iTIPOt],"arg","","","$"+FUN);
                tipoEquivalente(TIPO[RenSYM(T1)],TIPO[RenSYM(T2)]);
                tmp1 = PRM_c[iPRMc--]+"mete "+DIRMEM[RenSYM(T1)]+"\r\nmete "+DIRMEM[RenSYM(T2)]+ "\r\nmem"+"\r\nasig\r\n";
                PRM_c[++iPRMc] = tmp1;
                //System.out.println(PRM_c[iPRMc]);
                //pausa();
                contargs++;
                break;
            case 22:
                T1 = "$"+FUN+VAL;
                T2 = "$"+FUN+contargs;
                noDeclarada(T1);
                inserta(T1,TIPO_t[iTIPOt--],"par","","","$"+FUN);
                inserta(T2, TIPO_t[iTIPOt--],"arg","","","$"+FUN);
                tipoEquivalente(TIPO[RenSYM(T1)],TIPO[RenSYM(T2)]);
                PRM_c[++iPRMc] ="mete "+DIRMEM[RenSYM(T1)]+"\r\nmete "+DIRMEM[RenSYM(T2)]+ "\r\nmem"+"\r\nasig\r\n";
                contargs++;
                break;
            case 23:
                PRM_c[++iPRMc] = "";
                break;
            case 24:
                INST_c[++iINSTc] = ASIG_c[iASIGc--];
                break;
            case 25:
                INST_c[++iINSTc] = IF_c[iIFc--];
                break;
            case 26:
                INST_c[++iINSTc] = W_c[iWc--];
                break;
            case 27:
                INST_c[++iINSTc] = REP_c[iREPc--];
                break;
            case 28:
                INST_c[++iINSTc] = LEE_c[iLEEc--];
                break;
            case 29:
                INST_c[++iINSTc] = ESC_c[iESCc--];
                break;
            case 30:
                E0 = genEtq();
                E1 = genEtq();
                W_c[++iWc] = E0+" "+K_c[iKc--]+"mete$ "+E1+"\r\nirfalso\r\n"+
                        BLQ_c[iBLQc--]+"mete$ "+E0+"\r\nira\r\n"+E1+" copia\r\nsaca\r\n";
                break;
            case 31:
                E0 = genEtq();
                E1 = genEtq();
                T1 = K_c[iKc--]+"mete$ "+E0+"\r\nirverdad\r\n"+
                        BLQ_c[iBLQc--]+"mete$ "+E1+"\r\nira\r\n"+E0+" ";
                T2 = BLQ_c[iBLQc--]+E1+" copia\r\nsaca\r\n";

                IF_c[++iIFc] = T1+T2;
                break;
            case 32:
                //E0=genetq();IF.c = K.c |mete$ E0 |irfalso | BLQ.c | E0 | copia | saca
                E0 = genEtq();
                IF_c[++iIFc] = K_c[iKc--]+"mete$ "+E0+"\r\nirfalso\r\n"+
                        BLQ_c[iBLQc--]+E0+" copia\r\nsaca\r\n";
                break;
            case 33:
                //E0=genetq(); REP.c = E0 | BLQ.c | K.c | mete$ E0 | irfalso
                E0 = genEtq();
                REP_c[++iREPc] = E0+" "+BLQ_c[iBLQc--]+K_c[iKc--]+"mete$ "+E0+"\r\nirfalso\r\n";
                break;
            case 34:
                //LEE.c = VARL.c | lee | asig
                LEE_c[++iLEEc] = VARL_c[iVARLc--]+"lee\r\nasig\r\n";
                break;
            case 35:
                //VARL.c = mete DIR; no_arreglo(VAL)
                noArreglo(VAL);
                VARL_c[++iVARLc] = "mete "+DIR+"\r\n";
                break;
            case 36:
                //VARL.c = mete DIR
                VARL_c[++iVARLc] = "mete "+DIR+"\r\n";
                break;
            case 37:
                //VARL.c = mete DIRIDX | mem | mete 1 | opdif | mete DIR | opsum
                VARL_c[++iVARLc] = "mete "+DIRIDX+"\r\nmem\r\nmete 1\r\nopdif\r\nmete "+DIR+"\r\nopsum\r\n";
                break;
            case 38:
                //ASIG.c = VASIG.c | K.c | asig; tipo_equiv(VASIG.t, K.t)
                ASIG_c[++iASIGc] = VASIG_c[iVASIGc--]+K_c[iKc--]+"asig\r\n";
                tipoEquivalente(VASIG_t[iVASIGt--],K_t[iKt--]);
                break;
            case 39:
                //no_arreglo(VAL); VASIG.t=VAL.tipo; VASIG.c = mete | VAL.dir
                noArreglo(VAL);
                VASIG_t[++iVASIGt] = TIPO[RenSYM(VAL)];
                VASIG_c[++iVASIGc] = "mete "+DIRMEM[RenSYM(VAL)]+"\r\n";
                break;
            case 40:
                //VASIG.t = VAL.tipo; VASIG.c = mete DIR
                VASIG_t[++iVASIGt] = TIPO[RenSYM(VAL)];
                VASIG_c[++iVASIGc] = "mete "+DIR+"\r\n";
                break;
            case 41:
                //VASIG.t = VAL.tipo; VASIG.c = mete DIRIDX | mem |mete 1 | opdif | mete DIR | opsum
                VASIG_t[++iVASIGt] = TIPO[RenSYM(VAL)];
                VASIG_c[++iVASIGc] = "mete "+DIRIDX+"\r\nmem\r\nmete 1\r\nopdif\r\nmete "+DIR+"\r\nopsum\r\n";
                break;
            case 42:
                //ESC.c = K.c  | escribe
                ESC_c[++iESCc] = K_c[iKc--]+"escribe\r\n";
                break;
            case 43:
                //ESC.c = K.c | escribenl
                ESC_c[++iESCc] = K_c[iKc--]+"escribenl\r\n";
                break;
            case 44:
                //tipo_equiv(K.t,numerico); tipo_equiv(L.t,numerico); K.c = K.c | L.c | opor; K.t = numerico
                tipoEquivalente(K_t[iKt--],"numerico");
                tipoEquivalente(L_t[iLt--],"numerico");
                T1 = K_c[iKc--]+L_c[iLc--]+"opor\r\n";
                K_c[++iKc] = T1;
                K_t[++iKt] = "numerico";
                break;
            case 45:
                //tipo_equiv(K.t,numerico); tipo_equiv(L.t,numerico); K.c = K.c | L.c | opand; K.t = numerico
                tipoEquivalente(K_t[iKt--],"numerico");
                tipoEquivalente(L_t[iLt--],"numerico");
                T1 = K_c[iKc--]+L_c[iLc--]+"opand\r\n";
                K_c[++iKc] = T1;
                K_t[++iKt] = "numerico";
                break;
            case 46:
                //tipo_equiv(K.t,numerico); K.c = K.c | opnot; K.t = numerico
                tipoEquivalente(K_t[iKt--],"numerico");
                T1 = K_c[iKc--]+"opnot\r\n";
                K_c[++iKc] = T1;
                K_t[++iKt] = "numerico";
                break;
            case 47:
                //K.c = L.c | K.t = L.t
                K_c[++iKc] = L_c[iLc--];
                K_t[++iKt] = L_t[iLt--];
                break;
            case 48:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L = L | E opdif | opnot; L.t = numerico
                //print_tabla();
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");
                T1 = L_c[iLc--]+E_c[iEc--]+"opdif\r\nopnot\r\n";
                L_c[++iLc] = T1;
                L_t[++iLt] = "numerico";
                break;
            case 49:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L.c = L.c | E.c opdif; L.t = numerico
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");
                T1 = L_c[iLc--]+E_c[iEc--]+"opdif\r\n";
                L_c[++iLc] = T1;
                L_t[++iLt] = "numerico";
                break;
            case 50:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L.c = L.c | E.c | opdif | copia | opabs | opsum |L.c | E.c | opdif | opnot | opsum; L.t = numerico
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");
                T1 = L_c[iLc]+E_c[iEc]+"opdif\r\ncopia\r\nopabs\r\nopsum\r\n";
                T2 = L_c[iLc--]+E_c[iEc--]+"opdif\r\nopnot\r\nopsum\r\n";
                L_c[++iLc] = T1+T2;
                L_t[++iLt] = "numerico";
                break;
            case 51:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L.c = E.c | L.c | opdif | copia | opabs | opsum | E.c | L.c | opdif | opnot | opsum; L.t = numerico
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");
                T1 = E_c[iEc]+L_c[iLc]+"opdif\r\ncopia\r\nopabs\r\nopsum\r\n";
                T2 = E_c[iEc--]+L_c[iLc--]+"opdif\r\nopnot\r\nopsum\r\n";
                L_c[++iLc] = T1+T2;
                L_t[++iLt] = "numerico";
                break;
            case 52:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L.c = L.c | E.c | opdif | copia | opabs | opsum; L.t = numerico
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");

                T1 = L_c[iLc--]+E_c[iEc--]+"opdif\r\ncopia\r\nopabs\r\nopsum\r\n";
                L_c[++iLc] = T1;
                L_t[++iLt] = "numerico";
                break;
            case 53:
                //tipo_equiv(L.t,numerico); tipo_equiv(E.t,numerico); L.c = E.c | L.c | opdif | copia | opabs | opsum; L.t = numerico
                tipoEquivalente(L_t[iLt--],"numerico");
                tipoEquivalente(E_t[iEt--],"numerico");
                T1 = E_c[iEc--]+L_c[iLc--]+"opdif\r\ncopia\r\nopabs\r\nopsum\r\n";
                L_c[++iLc] = T1;
                L_t[++iLt] = "numerico";
                break;
            case 54:
                // L.c = N.c | L.t = N.t
                L_c[++iLc] = N_c[iNc--];
                L_t[++iLt] = N_t[iNt--];
                break;
            case 55:
                //N.c = E.c | N.t = E.t
                N_c[++iNc] = E_c[iEc--];
                N_t[++iNt] = E_t[iEt--];
                break;
            case 56:
                //tipo_equiv(E.t,numerico); tipo_equiv(T.t,numerico); E.c = E.c | T.c | opsum; E.t = numerico
                tipoEquivalente(E_t[iEt--],"numerico");
                tipoEquivalente(T_t[iTt--],"numerico");
                T1 = E_c[iEc--]+T_c[iTc--]+"opsum\r\n";
                E_c[++iEc] = T1;
                E_t[++iEt] = "numerico";
                break;
            case 57:
                //tipo_equiv(E.t,numerico); tipo_equiv(T.t,numerico); E.c = E.c | T.c | opdif; E.t = numerico
                tipoEquivalente(E_t[iEt--],"numerico");
                tipoEquivalente(T_t[iTt--],"numerico");
                T1 = E_c[iEc--]+T_c[iTc--]+"opdif\r\n";
                E_c[++iEc] = T1;
                E_t[++iEt] = "numerico";
                break;
            case 58:
                //E.c = T.c | E.t = T.t
                E_c[++iEc] = T_c[iTc--];
                E_t[++iEt] = T_t[iTt--];
                break;
            case 59:
                //tipo_equiv(T.t,numerico); tipo_equiv(F.t,numerico); T.c = T.c | F.c | opmul; T.t = numerico
                tipoEquivalente(T_t[iTt--],"numerico");
                tipoEquivalente(F_t[iFt--],"numerico");
                T1 = T_c[iTc--]+F_c[iFc--]+"opmul\r\n";
                T_c[++iTc] = T1;
                T_t[++iTt] = "numerico";
                break;
            case 60:
                //tipo_equiv(T.t,numerico); tipo_equiv(F.t,numerico); T.c = T.c | F.c | opcoc; T.t = numerico
                tipoEquivalente(T_t[iTt--],"numerico");
                tipoEquivalente(F_t[iFt--],"numerico");
                T1 = T_c[iTc--]+F_c[iFc--]+"opcoc\r\n";
                T_c[++iTc] = T1;
                T_t[++iTt] = "numerico";
                break;
            case 61:
                //tipo_equiv(T.t,numerico); tipo_equiv(F.t,numerico); T.c = T.c | F.c | opdiv; T.t = numerico
                tipoEquivalente(T_t[iTt--],"numerico");
                tipoEquivalente(F_t[iFt--],"numerico");
                T1 = T_c[iTc--]+F_c[iFc--]+"opdiv\r\n";
                T_c[++iTc] = T1;
                T_t[++iTt] = "numerico";
                break;
            case 62:
                //tipo_equiv(T.t,numerico); tipo_equiv(F.t,numerico); T.c = T.c | F.c | opmod; T.t = numerico
                tipoEquivalente(T_t[iTt--],"numerico");
                tipoEquivalente(F_t[iFt--],"numerico");
                T1 = T_c[iTc--]+F_c[iFc--]+"opmod\r\n";
                T_c[++iTc] = T1;
                T_t[++iTt] = "numerico";
                break;
            case 63:
                //T.c = F.c | T.t = F.t
                T_c[++iTc] = F_c[iFc--];
                T_t[++iTt] = F_t[iFt--];
                break;
            case 64:
                //F.t = K.t; F.c = K.c
                F_t[++iFt] = K_t[iKt--];
                F_c[++iFc] = K_c[iKc--];
                break;
            case 65:
                //tipo_equiv(K.t,numerico);F.c = K.c | opabs; F.t=numerico
                tipoEquivalente(K_t[iKt--],"numerico");
                F_c[++iFc] = K_c[iKc--]+"opabs\r\n";
                F_t[++iFt] = "numerico";
                break;
            case 66:
                //VAL=nombre_var(VAL); exista(VAL); no_arreglo(VAL); DIR = VAL.dir; F.c = mete DIR | mem; F.t = VAL.tipo
                VAL = nombre_var(VAL);
                estaDeclarada(VAL);
                noArreglo(VAL);
                DIR = DIRMEM[RenSYM(VAL)];
                F_c[++iFc] = "mete "+DIR+"\r\nmem\r\n";
                F_t[++iFt] = TIPO[RenSYM(VAL)];
                break;
            case 67:
                //exista(VAL); arreglo(VAL); rango(IDX); entero(IDX); DIR=VAL.dir; ; DIR = DIR + IDX; F.c = mete DIR | mem; F.t=VAL.tipo
                estaDeclarada(VAL);
                arreglo(VAL);
                idxEnArreglo(IDX,TAM[RenSYM(VAL)]);
                DIR = DIRMEM[RenSYM(VAL)];
                DIR = (Integer.parseInt(DIR)+Integer.parseInt(IDX))+"";
                F_c[++iFc] = "mete "+DIR+"\r\nmem\r\n";
                F_t[++iFt] = TIPO[RenSYM(VAL)];
                break;
            case 68:
                //exista(VAL); arreglo(VAL); IDX=nombre_var(IDX); exista(IDX);  no_arreglo(IDX); tipo_equiv(IDX, numerico); DIR=VAL.dir;DIRIDX=IDX.dir; F.t = VAL.tipo; F.c = mete DIRIDX | mem | mete 1 | opdif | mete DIR | opsum | mem
                estaDeclarada(VAL);
                arreglo(VAL);
                IDX = nombre_var(IDX);
                estaDeclarada(IDX);
                noArreglo(IDX);
                tipoEquivalente(TIPO[RenSYM(IDX)],"numerico");
                DIR = DIRMEM[RenSYM(VAL)];
                DIRIDX = DIRMEM[RenSYM(IDX)];
                F_t[++iFt] = TIPO[RenSYM(VAL)];
                F_c[++iFc] = "mete "+DIRIDX+"\r\nmem\r\nmete 1\r\nopdif\r\nmete "+DIR+"\r\nopsum\r\nmem\r\n";
                break;
            case 69:
                //F.c = mete VAL; F.t=numerico
                F_c[++iFc] = "mete "+VAL+"\r\n";
                F_t[++iFt] = "numerico";
                break;
            case 70:
                //F.c = mete VAL; F.t=cadena
                F_c[++iFc] = "mete "+VAL+"\r\n";
                F_t[++iFt] = "cadena";
                break;
            case 71:
                //E0=ETQ[NFUN.n]; F.c = ARGS.c |resp_pila() | meteip | mete 4 | opsum | mete$ E0 | ira | rest_pila() | mete DV_RET | mem; F.t = NFUN.t; cardinalidad(NFUN.n, contargs); contargs=0
                E0 = etq_fun(NFUN_n[iNFUNn]);
                F_c[++iFc] = ARGS_c[iARGSc--]+resp_pila()+"meteip\r\nmete 4\r\nopsum\r\nmete$ "+E0+"\r\nira\r\n"+rest_pila()+"mete "+DV_RET+"\r\nmem\r\n";
                F_t[++iFt] = NFUN_t[iNFUNt--];
                cardinalidad(NFUN_n[iNFUNn],contargs);
                contargs = 0;
                break;
            case 72:
                //NFUN.n = "$"+VAL; fun_declarada(NFUN.n,VAL); NFUN.t = VAL.tipo; DV_RET=NFUN.n.dir; etq_fun(NFUN.n)
                NFUN_n[++iNFUNn] = "$"+VAL;
                funDeclarada(NFUN_n[iNFUNn],VAL);
                NFUN_t[++iNFUNt] = TIPO[RenSYM(NFUN_n[iNFUNn])];
                DV_RET = DIRMEM[RenSYM(NFUN_n[iNFUNn])];
                etq_fun(NFUN_n[iNFUNn]);
                break;
            case 73:
                //Tmp1 = NFUN.n|contarg++;si(existe Tmp1 entonces tipo_equiv(Tmp1.t,K.t));  inserta(sym(Tmp1,K.t, arg, "", "","", NFUN.n));  ARGS.c = mete Tmp1.dir | K.c | asig
                T1 = NFUN_n[iNFUNn]+contargs++;
                if(existe_variable(T1)){
                    tipoEquivalente(TIPO[RenSYM(T1)],K_t[iKt--]);
                }
                inserta(T1,K_t[iKt],"arg","","",NFUN_n[iNFUNn]);
                ARGS_c[++iARGSc] = "mete "+DIRMEM[RenSYM(T1)]+"\r\n"+K_c[iKc--]+"asig\r\n";
                break;
            case 74:
                //Tmp1 = NFUN.n|contarg++; si(existe Tmp1 entonces tipo_equiv(Tmp1.t,K.t));  inserta(sym(Tmp1,K.t, arg,"", "", "",NFUN.n));  ARGS.c = ARGS.c | mete Tmp1.dir | K.c | asig
                T1 = NFUN_n[iNFUNn]+contargs++;
                if(existe_variable(T1)){
                    tipoEquivalente(TIPO[RenSYM(T1)],K_t[iKt--]);
                }
                inserta(T1,K_t[iKt],"arg","","",NFUN_n[iNFUNn]);
                T2 = ARGS_c[iARGSc--]+"mete "+DIRMEM[RenSYM(T1)]+"\r\n"+K_c[iKc--]+"asig\r\n";
                ARGS_c[++iARGSc] = T2;
                break;
            case 75:
                //ARGS.c = "";
                ARGS_c[++iARGSc] = "";
                break;

        }
    }
    public static String pausa(){
        BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
        String nada;
        try{
            nada = entrada.readLine();
            return(nada);
        } catch(Exception e) {
            System.out.println("Error en pausa");
            System.exit(4);
        }
        return("");
    }
    public static String getNumero(String accion) {
        return accion.substring(1);
    }
    public static boolean creaEscribeArchivo(File xFile, String mensaje){
        try{
            PrintWriter fileOut = new PrintWriter(
                    new FileWriter(xFile, true) );
            fileOut.println(mensaje);
            fileOut.close();
            return true;
        } catch (IOException ex) {
            return false;
        }
    }
    public static void lee_tablaSLR1() {
        // Lee el archivo tabla.csv, la primer fila son los terminales/noterminales/finarc
        // La primer columna son los estados
        // El resto de la tabla son las acciones
        File tabla = new File("tabla.txt");
        try {
            BufferedReader br = new BufferedReader(new FileReader(tabla));
            String line = br.readLine();

            String[] terminales = line.split("\t");
            String MArchivo = "";

            for (int i = 1; i < terminales.length; i++) {
                // Si el terminal es "," se cambia por ,
                if (terminales[i].equals("\",\""))
                    terminales[i] = ",";
                columnas.put(terminales[i], i-1);
                MArchivo += "columnas.put(\""+terminales[i]+"\", "+(i-1)+");\n";
            }


            // print columnas size
            //System.out.println(columnas.size());

            int i = 0;
            while ((line = br.readLine()) != null) {
                i++;
            }
            M = new String[i][terminales.length-1];
            br.close();
            br = new BufferedReader(new FileReader(tabla));
            br.readLine();
            i = 0;

            while ((line = br.readLine()) != null) {
                String[] fila = line.split("\t");
                for (int j = 1; j < fila.length; j++) {
                    if (!fila[j].equals(" ")){
                        M[i][j-1] = fila[j];
                        MArchivo += "M["+i+"]["+(j-1)+"]=\""+M[i][(j-1)]+"\";\n";
                        if(fila[j].equals("r0")){
                            M[i][j-1] = "Ac";
                            MArchivo += "M["+i+"]["+(j-1)+"]=\""+M[i][(j-1)]+"\";\n";

                        }
                    }
                    fila[j] = "";
                    M[i][j-1] = fila[j];

                }
                i++;
            }
            creaEscribeArchivo(new File("M.txt"), MArchivo);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void leer_P(){
        File P = new File("P.csv");
        try {
            BufferedReader br = new BufferedReader(new FileReader(P));
            String line;
            br.readLine();
            int i = 0;
            while ((line = br.readLine()) != null) {
                i++;
            }
            pi = new String[i];
            lp = new int[i];
            String PArchivo = "";
            PArchivo = "pi = new String["+i+"];\n";
            PArchivo += "lp = new int["+i+"];\n";
            br.close();
            br = new BufferedReader(new FileReader(P));
            br.readLine();
            i = 0;
            while ((line = br.readLine()) != null) {
                String[] fila = line.split(",");
                pi[i] = fila[0];
                lp[i] = Integer.parseInt(fila[1]);
                PArchivo += "pi["+i+"]=\""+pi[i]+"\";\nlp["+i+"]="+lp[i]+";\n";
                i++;
            }
            creaEscribeArchivo(new File("P.txt"), PArchivo);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void lee_token(File xFile){
        try{
            FileReader fr = new FileReader(xFile);
            BufferedReader br = new BufferedReader(fr);
            long NoSirve=br.skip(Posicion);
            String linea=br.readLine();
            Posicion=Posicion + linea.length() + 2;
            token = linea;
            linea=br.readLine();
            Posicion=Posicion + linea.length() + 2;
            lexema=linea;
            linea=br.readLine();
            Posicion=Posicion + linea.length() + 2;
            Ren=linea;
            linea=br.readLine();
            Posicion=Posicion + linea.length() + 2;
            Col=linea;
            fr.close();
        } catch(IOException e) {
            System.out.println("Errorsote: No se pudo leer el token");
            System.exit(4);
        }

    }
    public static String resp_pila(){
        StringBuilder codigo = new StringBuilder();
        if(EnFuncion){
            for (int i = 0; i<=isym; i++){
                if(RUT[i].equals("$"+FUN)){
                    codigo.append("mete ").append(DIRMEM[i]).append("\r\ncopia\r\nmem\r\n");
                }
            }
        }
        return codigo.toString();
    }
    public static String rest_pila(){
        StringBuilder codigo = new StringBuilder();
        if(EnFuncion){
            for (int i = 0; i<=isym; i++){
                if(RUT[i].equals("$"+FUN)){
                    codigo.append("asig\r\n");
                }
            }
        }
        return codigo.toString();
    }
    public static void cardinalidad(String Funcion, int Numero) {
        if (TAM[RenSYM(Funcion)].isEmpty())
            TAM[RenSYM(Funcion)] = contargs + "";
        else if (!TAM[RenSYM(Funcion)].equals(contargs + "")){
            System.out.println("Error: La funcion " + Funcion + " tiene " + contargs + " argumentos, pero se declaro con " + TAM[RenSYM(Funcion)] + " argumentos");
            System.exit(4);

        }
    }
    public static void lee_dos(File xFile){
        try{
            FileReader fr = new FileReader(xFile);
            BufferedReader br = new BufferedReader(fr);
            long NoSirve=br.skip(Pos2);
            String linea=br.readLine();
            Pos2=Pos2 + linea.length() + 2;
            MiFun=linea;
            linea=br.readLine();
            Pos2=Pos2 + linea.length() + 2;
            MiTipo=linea;
            fr.close();
        } catch(IOException e) {
            System.out.println("\n\n\7ERROR: No se puede leer el archivo: "+entrada);
            System.exit(4);
        }
    }
    public static void precarga_TS(String Archivo){
        if(xArchivo(Archivo).exists()){
            lee_dos(xArchivo(Archivo));
            while(!MiFun.equals("365")){
                ID[++isym]="$"+MiFun;
                TIPO[isym]=MiTipo;
                OBJ[isym]="fun";
                DIRMEM[isym]=(dirmem++)+"";
                TAM[isym]="";
                ETQ[isym]="";
                RUT[isym]="";
                lee_dos(xArchivo(Archivo));
            }
        }
    }
    public static void print_tabla(){
        System.out.println("  ==================================================================");
        System.out.println("                         TABLA DE SIMBOLOS");
        System.out.println("  ------------------------------------------------------------------");
        System.out.println("         ID          TIPO    OBJ   DIR    TAM   ETQ      RUTINA");
        System.out.println("  ---------------  --------  ---  -----  -----  ---  ---------------");
        for(int i=0;i<=isym;i++)
            System.out.printf("  %-15s  %-8s  %-3s  %5s  %5s  %3s  %-15s\n",ID[i],TIPO[i],OBJ[i],DIRMEM[i],TAM[i],ETQ[i],RUT[i]);
        System.out.println("  ==================================================================");
    }
    public static int RenSYM(String lex){
        for (int i = 0; i <= isym; i++) {
            if (ID[i].equals(lex)) {
                return i;
            }
        }
        return -1;
    }
    public static void error(){
        System.out.println("Error cerca de la linea "+Ren+" y columna "+Col+" con "+token+" "+lexema);
        // Detiene con error 4
        System.exit(4);
    }
    public static void inserta(String Id, String Tipo, String Obj, String Tam, String Etq, String Rut){
        if(!existe_variable(Id)){
            ID[++isym]=Id;
            TIPO[isym]=Tipo;
            OBJ[isym]=Obj;
            DIRMEM[isym]=(dirmem++)+"";
            TAM[isym]=Tam;
            ETQ[isym]=Etq;
            RUT[isym]=Rut;
        }
    }
    public static String nombre_var(String var){
        String nombre;
        if(EnFuncion){
            if(var.equals(FUN))
                return("$"+var);
            else{
                nombre = "$"+FUN+var;
                if(existe_variable(nombre))
                    return(nombre);
                else
                    return(var);
            }
        }else
            return(var);
    }
    public static boolean existe_variable(String var){
        for(int i=0;i<=isym;i++){
            if(var.equals(ID[i]))
                return(true);
        }
        return(false);
    }
    public static boolean noExisteVariable(String var){
        if(existe_variable(var)){
            System.out.println("Error: Variable duplicada: "+var+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean estaDeclarada(String var){
        if(!existe_variable(var)){
            System.out.println("Error: Variable no declarada: "+var+"["+Ren+","+Col+"]");
            System.exit(4);
            return false;
        }
        return true;
    }
    public static boolean funDeclarada(String var, String nombre){
        if(estaDeclarada(var))
            return(true);
        System.out.println("\n\n\7ERROR: Funcion no declarada ==> "+nombre+" ("+Ren+","+Col+")");
        System.exit(4);
        return(false);
    }
    public static boolean arreglo(String var){
        if(!OBJ[RenSYM(var)].equals("arr")){
            System.out.println("Error: Variable no es un arreglo: "+var+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean noArreglo(String var){
        if(OBJ[RenSYM(var)].equals("arr")){
            System.out.println("Error: Variable es un arreglo: "+var+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean entero(String num){
        try{

            int xx = Integer.parseInt(num);

        } catch (NumberFormatException e){
            System.out.println("Error: El numero debe ser entero: "+num+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean tipoEquivalente(String tipo1, String tipo2){
        if(!tipo1.equals(tipo2)){
            System.out.println("Error: Tipos no equivalentes: "+tipo1+" y "+tipo2+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean entero1a5000(String num){
        try{
            int xx = Integer.parseInt(num);
            if( !(xx>=1 && xx<=5000) ){
                System.out.println("Error: Numero fuera del rango 1-5000: "+num+"["+Ren+","+Col+"]");
                System.exit(4);
            }
        } catch (NumberFormatException e){
            System.out.println("Error: El numero del rango debe ser entero: "+num+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }
    public static boolean idxEnArreglo(String idx, String tam){
        boolean resultado = false;
        try{
            int xx = Integer.parseInt(idx);
            int yy = Integer.parseInt(tam);
            if( !(xx>=1 && xx<=yy) ){
                System.out.println("Error: Indice fuera de rango: "+idx+" ["+Ren+","+Col+"]");
                System.exit(4);
            }
            resultado = true;
        } catch (NumberFormatException e){
            resultado = false;
            System.out.println("Error: El indice debe ser entero: "+idx+" ["+Ren+","+Col+"]");
            System.exit(4);
        }
        return resultado;
    }
    public static String etq_fun(String Funcion){
        if(ETQ[RenSYM(Funcion)].equals(""))
            ETQ[RenSYM(Funcion)]=(contetq++)+"";
        return(ETQ[RenSYM(Funcion)]);
    }
    public static String genEtq(){
        return((contetq++)+"");
    }
    public static boolean noDeclarada(String var){
        if(existe_variable(var)){
            System.out.println("Error: Variable duplicada: "+var+"["+Ren+","+Col+"]");
            System.exit(4);
        }
        return true;
    }



}
